#!/usr/bin/env ruby
require 'open3'
require 'fileutils'

ARROW    = "----->"
MIN_AROW = "  --->"
INDENT   = "      "

def log_main(s)
	$stdout.puts ARROW + " " + s
end

def log_minor(s)
	$stdout.puts MIN_AROW + " " + s
end

def log_detail(s)
	$stdout.puts INDENT + " " + s
end

def run_command(*cmd)
	exit_status = -1 
	Open3.popen2e(*cmd) do |i,oe,t|
		oe.each { |line| log_detail line }
		exit_status = t.value
	end
	return exit_status
end

build_dir = ARGV[0]
cache_dir = ARGV[1]
env_dir = ARGV[2]

log_main "Found a valid resolutionizer application"

log_main "Downloading and installing the latest version of node and npm"
node_version = "0.10.33"
node_url="http://s3pository.heroku.com/node/v#{node_version}/node-v#{node_version}-linux-x64.tar.gz"
if run_command("curl #{node_url} -s -o - | tar xzf - -C #{build_dir}") != 0 
	log_main"Error occured installing node and npm"
	exit 1
end

FileUtils.mkdir_p File.join(build_dir, "vendor", "node")
FileUtils.mv Dir.glob(File.join(build_dir, "node-v#{node_version}-linux-x64", "*")), File.join(build_dir, "vendor", "node")
Dir.glob(File.join(build_dir, "vendor", "node", "bin", "*")).each do |f|	
	FileUtils.chmod(0777, f, :verbose => true)
end

ENV["PATH"] = File.join(build_dir, "vendor", "node", "bin") + File::PATH_SEPARATOR + ENV['PATH']

log_minor "Using node version"
if run_command('node', '--version') != 0
	log_main "Error checking node version"
	exit 1
end

log_minor "Updating npm to latest"
if run_command('npm install -g npm') != 0
	log_main "Error updating npm"
	exit 1
end

log_minor "Using npm version"
if run_command('npm', '--version') != 0
	log_main "Error checking npm version"
	exit 1
end

log_main "Obtaining client dependencies"
Dir.chdir File.join(build_dir, "resolutionizer")
log_detail "Entering directory #{Dir.pwd}"

log_minor "Installing grunt-cli"
if run_command('npm', 'install', '-g', 'grunt-cli@0.1.13') != 0
	if run_command('grunt', '--version') != 0
		log_main "Error occured installing grunt-cli"
		exit 1
	end
end

log_minor "Installing bower"
if run_command("npm", "install", "-g", "bower@1.3.12") != 0
	log_main "Error occured installing bower"
	exit 1
end

log_minor "Installing node-modules"
if run_command('npm', 'install') != 0
	log_main "Error occured installing node-modules"
	exit 1
end

log_minor "Installing bower components"
if run_command('bower', 'install') != 0
	log_main "Error occured installing bower components"
	exit 1
end

log_main "Building client"
log_minor "Running grunt tasks"
if run_command('grunt') != 0 
	log_main "Error occured building site"
	exit 1
end

FileUtils.chdir File.join(build_dir, "resolutionizerd")
log_main "Downloading and installing Go"
log_detail "Entering directory #{Dir.pwd}"

go_url="https://storage.googleapis.com/golang/go1.4.linux-amd64.tar.gz"
if run_command("curl #{go_url} -s -o - | tar xzf - -C #{build_dir}/vendor") != 0 
	log_main"Error occured installing Go"
	exit 1
end

ENV['GOROOT'] = File.join build_dir, 'vendor', 'go'
log_detail "Setting GOROOT to #{ENV['GOROOT']}"

ENV['PATH'] = File.join(ENV['GOROOT'], 'bin') + File::PATH_SEPARATOR + ENV['PATH']

gopath = File.join build_dir, '.heroku', 'g'
ENV['GOPATH'] = gopath
log_detail "Setting GOPATH to #{gopath}"

FileUtils.mkdir_p File.join(gopath, 'src')
FileUtils.cp_r File.join(build_dir, 'resolutionizerd'), File.join(gopath, 'src', 'resolutionizerd')

FileUtils.chdir File.join(gopath, 'src', 'resolutionizerd')
log_main "Building server"
log_detail "Entering GOPATH directory #{Dir.pwd}"

if run_command('go', 'get', '-tags', 'heroku', '-v') != 0
	log_main "Error building server"
	exit 1
end

FileUtils.mkdir_p File.join(build_dir, 'bin')
FileUtils.cp File.join(gopath, 'bin', 'resolutionizerd'), File.join(build_dir, 'bin', 'resolutionizerd')
Dir.glob(File.join(build_dir, 'bin', '*')).each do |f|
	log_detail f
end

exit 0